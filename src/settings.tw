:: StoryTitle [.initialize] {"position":"0,0"}
Twine Template



:: StoryData [.initialize] {"position":"0,100"}
{
	"ifid": "26A935CA-F6DD-46B0-A9E5-E73331379B61",
    "format": "SugarCube",
    "format-version": "2.36.1"
}



:: StorySubtitle [.initialize] {"position":"0,200"}




:: StoryAuthor [.initialize] {"position":"0,300"}
LeahPeach



:: StoryInit [.initialize] {"position":"0,400"}
/* Everything here is only called once, when the story is initialized.
This is great for variables and settings. */

<<script>>
/* Here we add the tooltip functionality to the macro system. We also 
initialize the corresponding variables here, so we can keep 
everything tidy. */

/* 
##     ## ####  ######   ######  
###   ###  ##  ##    ## ##    ## 
#### ####  ##  ##       ##       
## ### ##  ##   ######  ##       
##     ##  ##        ## ##       
##     ##  ##  ##    ## ##    ## 
##     ## ####  ######   ######  
*/

/* Set a tooltip for a singular word. This also makes it a template. 
FIXME: After a linkreplace, this function doesn't work properly. Likely an issue with tt-macro. */
function add_tooltip (macroname, passage, metaname = false) {
    let psg = Story.get(passage);
    
    Template.add(macroname, function () {
        let name = metaname ? metaname : this.name;

        // Only show tooltips if they're enabled in settings.
        // AND
        // TOOD: Only show tooltips if there is text in the passage.
        if (settings.tooltips) {
            return "<<tt " + psg.title + ">>" + name + "<</tt>>"
        } else {
            return name;
        }
        
    });
};

/*
########     ###    ########    ###    ########     ###     ######  ######## 
##     ##   ## ##      ##      ## ##   ##     ##   ## ##   ##    ## ##       
##     ##  ##   ##     ##     ##   ##  ##     ##  ##   ##  ##       ##       
##     ## ##     ##    ##    ##     ## ########  ##     ##  ######  ######   
##     ## #########    ##    ######### ##     ## #########       ## ##       
##     ## ##     ##    ##    ##     ## ##     ## ##     ## ##    ## ##       
########  ##     ##    ##    ##     ## ########  ##     ##  ######  ######## 
*/

/* DEV FEATURES */
/* HACK: For some reason, the StoryMenu isn't able to comprehend the 
Config.debug value, so this is required. */
State.variables.dev_test = Config.debug;

/* TODO: These variables don't update when added to the script, reload 
the script, and then refresh. This is fine for most things, but 
when things are added here, I want them to be initialized on the 
save file created in a previous version. */
/* This is because State is replaced by the loaded file. See:
https://www.motoslave.net/sugarcube/2/docs/#guide-state-sessions-and-saving-refreshing-and-restarting */

/* USER IDENTIFICATION FEATURES  */
State.variables.user = {};
State.variables.user.itch_id = undefined;
State.variables.user.logged_in = false;

/* META STUFF */
/* Important variables that are hopefully one day transferable across stories. */
State.variables.meta = {};
State.variables.meta.psgsthatsentdb = [];

/* Useful if you have server-side stuff that you're doing. */
importScripts(["src/assets/js/uuid.min.js", "src/assets/js/game_ssr.js"])
    /* HACK: You have to manually copy over the game_ssr.js webpack. A symlink doesn't work for some reason. */
    /* Strictly speaking, I don't need to import the above, but they give a promise and I have to have them loaded to do things, so... */
    .then(() => {
        /* Ensure we are logged in every time. */
        State.variables.user.logged_in = false;

        /* FIXME SERVER: We are making a local db from the exported object db (from game_ssr.js) This line is fucking cursed. */
        db = new db; 
        
        if (!recall('user-uuid')) {
            /* Brand new UUID, so the user will need to log in. */
            memorize('user-uuid',  uuid_v4());
            db.createLoginChecker(recall('user-uuid'), loggedin);
            return;
        }
    
        /* The UUID already exists, so let's try to get the itch_id and DB variables. */
        try {
            db.getItchID(recall('user-uuid'))
            .then ((result) => {
                /* If we can't get the ID, they've never logged in. */
                if (result === undefined || result.itch_id === undefined) {
                    /* We've never logged in. */
                    db.createLoginChecker(recall('user-uuid'), loggedin);
                    return;
                }

                loggedin(result.itch_id);
            });
        
        } catch (e) {
            console.warn(e);
        }
        
    })
    .catch(e => {
        console.warn(e);
    });

    /* Run this one we are logged in. */
    function loggedin(id) {
        State.variables.user.itch_id = id
        
        db.getDBVars(State.variables.user.itch_id).then(result => {
            /* When merging, if there are duplicate key names, the 
            properties of the last object listed overwrites the 
            previous one(s). */
            State.variables.meta = {
                ...State.variables.meta,
                ...result
            }
        }).then(() => {
            /* Set our client as logged in. */
            State.variables.user.logged_in = true;
            UIBar.update();
            Engine.show(); // to rerun <<setmeta>>
        });

        /* NEXT: Create a one-time dialogue box that says, "You logged in! :D" */

        return;
    }
;

/* 
##     ##    ###    ########  ####    ###    ########  ##       ########  ######  
##     ##   ## ##   ##     ##  ##    ## ##   ##     ## ##       ##       ##    ## 
##     ##  ##   ##  ##     ##  ##   ##   ##  ##     ## ##       ##       ##       
##     ## ##     ## ########   ##  ##     ## ########  ##       ######    ######  
 ##   ##  ######### ##   ##    ##  ######### ##     ## ##       ##             ## 
  ## ##   ##     ## ##    ##   ##  ##     ## ##     ## ##       ##       ##    ## 
   ###    ##     ## ##     ## #### ##     ## ########  ######## ########  ######  
*/
/* GAME FEATURES */
State.variables.ft_knowledge = false;
State.variables.ft_people = false;
State.variables.ft_disable = [];
State.variables.ft_warning = [];

/* STATE/STATUS  */
/* Information about your current state or status.  */
/*
    "pc" == Playable Character
    "pp" == Permanent Partner
    "tp" == Temporary Partner
*/
State.variables.pc_nude = false;
State.variables.pc_topless = false;
/* The body parts the playable character has. */
State.variables.pc = {}


/* EVENTS  */
/* These are generally used for logic and not stuff in the UIBar or tooltips. */
State.variables.ev_any_event = false;


/* KNOWLEDGE */
/* These are used for tooltips and also in the knowledge tab. See UIBar/knowledge.tw */
State.variables.kn_vampire_lv = 0;
add_tooltip(["vampire", "vampires"], "K_Vampires");


// PEOPLE
/* These are used for tooltips and also in the people tab. See UIBar/people.tw */
State.variables.ppl_orick_met = false;
add_tooltip("Orick", "P_Orick");


// LOCATIONS
// Locations are completely unimplemented, but would be used the same way as people, but you discover them instead of meeting them.
State.variables.loc_lox_disc = false;
State.variables.loc_lox = 0;
add_tooltip("Lox", "L_Lox")


// TOOLTIPS
/* Misc. things that I want to have a tooltip but will otherwise never be seen. */
add_tooltip("tower", "TT_Tower");


/*
 ######  ######## ######## ######## #### ##    ##  ######    ######  
##    ## ##          ##       ##     ##  ###   ## ##    ##  ##    ## 
##       ##          ##       ##     ##  ####  ## ##        ##       
 ######  ######      ##       ##     ##  ## ## ## ##   ####  ######  
      ## ##          ##       ##     ##  ##  #### ##    ##        ## 
##    ## ##          ##       ##     ##  ##   ### ##    ##  ##    ## 
 ######  ########    ##       ##    #### ##    ##  ######    ######  
*/

// Toggle the option for images.
// Setting.addToggle("images", {
//     label: "Allow images?",
//     default: true
// })

// Toggle for Background Images.
Setting.addToggle("bgimg", {
    label: "Show Background Images?",
    default: true
});
settings.bgimg = true;

// Toggle option for tooltips.
Setting.addToggle("tooltips", {
    label: "Show tooltips on important text?",
    default: true,
    onChange: () => { Engine.show() },
});
settings.tooltips = true;

Setting.save();

// Pronouns
Setting.addList("pronouns", {
    label   : "Preferred Pronouns:",
    list    : [
        "he/him/his", 
        "she/her/hers", 
        "they/them/theirs"],
    default : "he/him/his",
    onChange: () => { Engine.show() },
});
<</script>>
